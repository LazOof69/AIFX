# AIFX Simplified Web Trading Signals - Docker Compose Configuration
# AIFX 簡化網頁交易信號 - Docker Compose 配置

version: '3.8'

services:
  aifx-web-signals:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: aifx-trading-signals-web
    ports:
      - "8080:8080"
    environment:
      - AIFX_ENV=production
      - TZ=UTC
      - PYTHONPATH=/app
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      # Mount data cache directory for persistence
      - ./data/cache:/app/data/cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - aifx-network

  # Optional: Redis for caching (can be enabled for better performance)
  redis-cache:
    image: redis:7-alpine
    container_name: aifx-redis-cache
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - aifx-network
    profiles:
      - with-cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Optional: Nginx reverse proxy (can be enabled for production)
  nginx-proxy:
    image: nginx:alpine
    container_name: aifx-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - aifx-web-signals
    restart: unless-stopped
    networks:
      - aifx-network
    profiles:
      - with-nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  aifx-network:
    driver: bridge
    name: aifx-trading-network

volumes:
  redis-data:
    driver: local
    name: aifx-redis-data

# Usage Examples:
# ================
#
# Basic web interface only:
# docker-compose -f docker-compose.web.yml up -d
#
# With Redis caching:
# docker-compose -f docker-compose.web.yml --profile with-cache up -d
#
# With Nginx proxy:
# docker-compose -f docker-compose.web.yml --profile with-nginx up -d
#
# Full production setup (with cache and proxy):
# docker-compose -f docker-compose.web.yml --profile with-cache --profile with-nginx up -d
#
# View logs:
# docker-compose -f docker-compose.web.yml logs -f
#
# Stop and remove:
# docker-compose -f docker-compose.web.yml down
#
# Stop and remove with volumes:
# docker-compose -f docker-compose.web.yml down -v