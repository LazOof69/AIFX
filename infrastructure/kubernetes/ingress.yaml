# AIFX - Kubernetes Ingress Configuration
# AIFX - Kubernetes入口配置

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aifx-ingress
  namespace: aifx
  labels:
    app: aifx-app
    app.kubernetes.io/name: aifx
    app.kubernetes.io/instance: aifx
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: aifx-trading-system
    app.kubernetes.io/managed-by: kubernetes
    environment: production
  annotations:
    # Ingress Controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # SSL/TLS Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    cert-manager.io/acme-challenge-type: "http01"
    
    # AWS Load Balancer Controller
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/load-balancer-name: "aifx-alb"
    alb.ingress.kubernetes.io/group.name: "aifx"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: |
      {
        "Type": "redirect",
        "RedirectConfig": {
          "Protocol": "HTTPS",
          "Port": "443",
          "StatusCode": "HTTP_301"
        }
      }
    
    # Health Checks
    alb.ingress.kubernetes.io/healthcheck-path: "/health"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "10"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin";
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'";
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://aifx.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Connection and Buffer Settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Load Balancing
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # Session Affinity
    nginx.ingress.kubernetes.io/session-cookie-name: "aifx-session"
    nginx.ingress.kubernetes.io/session-cookie-expires: "3600"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "3600"
    nginx.ingress.kubernetes.io/session-cookie-path: "/"
    
spec:
  tls:
  - hosts:
    - aifx.example.com  # Replace with actual domain
    - api.aifx.example.com
    - grafana.aifx.example.com
    secretName: aifx-tls-secret
  rules:
  - host: aifx.example.com  # Replace with actual domain
    http:
      paths:
      # Main Application
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aifx-app-service
            port:
              number: 80
      # Health Checks
      - path: /health
        pathType: Exact
        backend:
          service:
            name: aifx-app-service
            port:
              number: 80
      - path: /ready
        pathType: Exact
        backend:
          service:
            name: aifx-app-service
            port:
              number: 80
      # API Routes
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: aifx-app-service
            port:
              number: 80
      # Metrics (restricted access)
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: aifx-app-service
            port:
              number: 8001
      # Documentation (if enabled)
      - path: /docs
        pathType: Prefix
        backend:
          service:
            name: aifx-app-service
            port:
              number: 80
      # WebSocket connections for real-time data
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: aifx-app-service
            port:
              number: 80
  
  # API Subdomain
  - host: api.aifx.example.com  # Replace with actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aifx-app-service
            port:
              number: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aifx-monitoring-ingress
  namespace: monitoring
  labels:
    app: monitoring
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/instance: monitoring
    app.kubernetes.io/component: ingress
    environment: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    
    # Basic Authentication for Monitoring Tools
    nginx.ingress.kubernetes.io/auth-type: "basic"
    nginx.ingress.kubernetes.io/auth-secret: "monitoring-auth"
    nginx.ingress.kubernetes.io/auth-realm: "AIFX Monitoring - Authentication Required"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # IP Whitelist (restrict to internal networks)
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
spec:
  tls:
  - hosts:
    - grafana.aifx.example.com  # Replace with actual domain
    - prometheus.aifx.example.com
    - kibana.aifx.example.com
    secretName: aifx-monitoring-tls-secret
  rules:
  # Grafana Dashboard
  - host: grafana.aifx.example.com  # Replace with actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
  
  # Prometheus Server
  - host: prometheus.aifx.example.com  # Replace with actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-server
            port:
              number: 9090
  
  # Kibana Dashboard
  - host: kibana.aifx.example.com  # Replace with actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kibana
            port:
              number: 5601

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: aifx-ingress-network-policy
  namespace: aifx
  labels:
    app: aifx-app
    app.kubernetes.io/component: network-policy
    environment: production
spec:
  podSelector:
    matchLabels:
      app: aifx-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8001
  egress:
  # Allow DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS outbound
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow database connections
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 27017