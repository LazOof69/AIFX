# AIFX - Secrets Configuration Template
# AIFX - 密鑰配置模板
# NOTE: This is a template file. Real secrets should be created separately with actual values.
# 注意：這是一個模板檔案。實際的密鑰應該使用真實值單獨創建。

---
apiVersion: v1
kind: Secret
metadata:
  name: aifx-secrets
  namespace: aifx
  labels:
    app: aifx-app
    app.kubernetes.io/name: aifx
    app.kubernetes.io/instance: aifx
    app.kubernetes.io/component: secrets
    environment: production
  annotations:
    description: "AIFX application secrets | AIFX應用程式密鑰"
type: Opaque
data:
  # Database Configuration (base64 encoded) | 資料庫配置（base64編碼）
  # Replace with actual base64 encoded values | 請替換為實際的base64編碼值
  postgres-host: <BASE64_ENCODED_POSTGRES_HOST>      # Example: cG9zdGdyZXMtc2VydmljZQ==
  postgres-port: <BASE64_ENCODED_POSTGRES_PORT>      # Example: NTQzMg==
  postgres-db: <BASE64_ENCODED_POSTGRES_DB>          # Example: YWlmeA==
  postgres-user: <BASE64_ENCODED_POSTGRES_USER>      # Example: YWlmeF91c2Vy
  postgres-password: <BASE64_ENCODED_POSTGRES_PASS>  # Example: c3VwZXJfc2VjdXJlX3Bhc3N3b3Jk
  
  # Redis Configuration | Redis配置
  redis-host: <BASE64_ENCODED_REDIS_HOST>            # Example: cmVkaXMtc2VydmljZQ==
  redis-port: <BASE64_ENCODED_REDIS_PORT>            # Example: NjM3OQ==
  redis-password: <BASE64_ENCODED_REDIS_PASS>        # Example: cmVkaXNfcGFzc3dvcmQ=
  
  # MongoDB Configuration | MongoDB配置
  mongodb-host: <BASE64_ENCODED_MONGODB_HOST>        # Example: bW9uZ29kYi1zZXJ2aWNl
  mongodb-port: <BASE64_ENCODED_MONGODB_PORT>        # Example: MjcwMTc=
  mongodb-user: <BASE64_ENCODED_MONGODB_USER>        # Example: YWlmeF9tb25nb191c2Vy
  mongodb-password: <BASE64_ENCODED_MONGODB_PASS>    # Example: bW9uZ29fYWRtaW5fcGFzcw==
  
  # API Keys and External Services | API金鑰和外部服務
  alpha-vantage-api-key: <BASE64_ENCODED_API_KEY>    # Example: WU9VUl9BTFBIQV9WQU5UQUdFX0FQSV9LRVk=
  fxcm-api-key: <BASE64_ENCODED_FXCM_KEY>            # Example: WU9VUl9GWENNX0FQSV9LRVk=
  oanda-api-key: <BASE64_ENCODED_OANDA_KEY>          # Example: WU9VUl9PQU5EQV9BUElfS0VZ
  
  # JWT and Security | JWT和安全性
  jwt-secret: <BASE64_ENCODED_JWT_SECRET>            # Example: c3VwZXJfc2VjdXJlX2p3dF9rZXlfMjU2X2JpdHM=
  encryption-key: <BASE64_ENCODED_ENCRYPTION_KEY>    # Example: MzJfYnl0ZXNfZW5jcnlwdGlvbl9rZXlfaGVyZQ==
  
  # SSL/TLS Certificates (if needed) | SSL/TLS證書（如需要）
  tls-cert: <BASE64_ENCODED_TLS_CERT>               # Example: LS0tLS1CRUdJTi...
  tls-key: <BASE64_ENCODED_TLS_KEY>                 # Example: LS0tLS1CRUdJTi...

---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: monitoring
  labels:
    app: monitoring
    component: authentication
    environment: production
  annotations:
    description: "Basic authentication for monitoring services | 監控服務的基本認證"
type: Opaque
data:
  # Basic Auth for Monitoring Tools | 監控工具的基本認證
  # Format: base64 encode of "username:bcrypt_hashed_password"
  # 格式：對 "username:bcrypt_hashed_password" 進行base64編碼
  auth: <BASE64_ENCODED_BASIC_AUTH>  # Example: YWRtaW46JDJ5JDEwJC4uLi4uLg==

---
apiVersion: v1
kind: Secret
metadata:
  name: aifx-registry-secret
  namespace: aifx
  labels:
    app: aifx-app
    component: registry
    environment: production
  annotations:
    description: "Docker registry credentials | Docker註冊表憑證"
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <BASE64_ENCODED_DOCKER_CONFIG>  # Docker registry authentication

---
apiVersion: v1
kind: Secret
metadata:
  name: aifx-tls-secret
  namespace: aifx
  labels:
    app: aifx-app
    component: tls
    environment: production
  annotations:
    description: "TLS certificates for HTTPS | HTTPS的TLS證書"
    cert-manager.io/cluster-issuer: "letsencrypt-production"
type: kubernetes.io/tls
data:
  tls.crt: <BASE64_ENCODED_TLS_CERT>  # TLS certificate
  tls.key: <BASE64_ENCODED_TLS_KEY>   # TLS private key

---
# Secret creation script template | 密鑰創建腳本模板
# Save this as create-secrets.sh and run with actual values
# 將此內容保存為 create-secrets.sh 並使用實際值運行
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-creation-script
  namespace: aifx
  annotations:
    description: "Template script for creating secrets with real values | 用實際值創建密鑰的模板腳本"
data:
  create-secrets.sh: |
    #!/bin/bash
    # AIFX Secrets Creation Script | AIFX密鑰創建腳本
    
    echo "Creating AIFX secrets..."
    
    # Database secrets | 資料庫密鑰
    kubectl create secret generic aifx-secrets \
      --from-literal=postgres-host="your-postgres-host" \
      --from-literal=postgres-port="5432" \
      --from-literal=postgres-db="aifx" \
      --from-literal=postgres-user="your-user" \
      --from-literal=postgres-password="your-secure-password" \
      --from-literal=redis-host="your-redis-host" \
      --from-literal=redis-port="6379" \
      --from-literal=redis-password="your-redis-password" \
      --from-literal=mongodb-host="your-mongodb-host" \
      --from-literal=mongodb-port="27017" \
      --from-literal=mongodb-user="your-mongo-user" \
      --from-literal=mongodb-password="your-mongo-password" \
      --from-literal=alpha-vantage-api-key="your-alpha-vantage-key" \
      --from-literal=fxcm-api-key="your-fxcm-key" \
      --from-literal=oanda-api-key="your-oanda-key" \
      --from-literal=jwt-secret="your-256-bit-jwt-secret" \
      --from-literal=encryption-key="your-32-byte-encryption-key" \
      --namespace aifx \
      --dry-run=client -o yaml | kubectl apply -f -
    
    # Monitoring authentication | 監控認證
    htpasswd -bc auth admin your-monitoring-password
    kubectl create secret generic monitoring-auth \
      --from-file=auth \
      --namespace monitoring
    
    # TLS certificates (if using cert-manager) | TLS證書（如果使用cert-manager）
    # This will be automatically created by cert-manager
    # 這將由cert-manager自動創建
    
    echo "✅ Secrets created successfully!"
    echo "✅ 密鑰創建成功！"

  # Instructions for manual secret creation | 手動創建密鑰的說明
  README.md: |
    # AIFX Secrets Management | AIFX密鑰管理
    
    ## Creating Secrets Manually | 手動創建密鑰
    
    1. **Database Connection | 資料庫連接**
    ```bash
    kubectl create secret generic aifx-secrets \
      --from-literal=postgres-host="your-rds-endpoint" \
      --from-literal=postgres-password="your-secure-password" \
      --namespace aifx
    ```
    
    2. **API Keys | API金鑰**
    ```bash
    kubectl patch secret aifx-secrets \
      --patch='{"data":{"alpha-vantage-api-key":"'$(echo -n "YOUR_API_KEY" | base64)'"}}' \
      --namespace aifx
    ```
    
    3. **Monitoring Authentication | 監控認證**
    ```bash
    htpasswd -bc auth admin your-password
    kubectl create secret generic monitoring-auth \
      --from-file=auth \
      --namespace monitoring
    ```
    
    4. **TLS Certificates | TLS證書**
    - Use cert-manager for automatic certificate management
    - Or manually upload certificates using kubectl
    
    ## Security Best Practices | 安全最佳實踐
    
    - Never commit actual secrets to version control
    - Use separate secrets for different environments
    - Rotate secrets regularly
    - Use encryption at rest
    - Limit access with RBAC
    
    ## Verification | 驗證
    ```bash
    kubectl get secrets -n aifx
    kubectl describe secret aifx-secrets -n aifx
    ```