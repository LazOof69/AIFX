# AIFX - GitHub Actions CI/CD Pipeline
# AIFX - GitHub Actions CI/CD管道

name: AIFX Production Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'infrastructure/**'
      - 'Dockerfile'
      - 'requirements*.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'infrastructure/**'
      - 'Dockerfile'
      - 'requirements*.txt'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: aifx
  EKS_CLUSTER_NAME: aifx-production
  KUBE_NAMESPACE: aifx
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ============================================================================
  # Code Quality and Security Checks
  # ============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -r requirements-test.txt

    - name: Run code formatting check
      run: |
        black --check --diff src/
        isort --check-only --diff src/

    - name: Run linting
      run: |
        flake8 src/ --max-line-length=100 --exclude=__pycache__
        mypy src/ --ignore-missing-imports

    - name: Run security scan
      run: |
        pip install bandit safety
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ============================================================================
  # Unit and Integration Tests
  # ============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: aifx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run unit tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: aifx_test
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        AIFX_ENV: testing
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Run integration tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: aifx_test
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        AIFX_ENV: testing
      run: |
        python test_integration_phase1_phase2.py
        python test_phase3_signal_combination.py

  # ============================================================================
  # Build and Push Docker Image
  # ============================================================================
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Scan image for vulnerabilities
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        fail-build: true
        severity-cutoff: high

    - name: Upload scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name aifx-staging

    - name: Deploy to staging
      run: |
        # Update image in deployment
        kubectl set image deployment/aifx-app aifx-app=${{ needs.build-and-push.outputs.image-tag }} -n aifx-staging
        kubectl set image deployment/aifx-ai-worker aifx-ai-worker=${{ needs.build-and-push.outputs.image-tag }} -n aifx-staging
        
        # Wait for rollout to complete
        kubectl rollout status deployment/aifx-app -n aifx-staging --timeout=600s
        kubectl rollout status deployment/aifx-ai-worker -n aifx-staging --timeout=600s

    - name: Run smoke tests
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=aifx-app -n aifx-staging --timeout=300s
        
        # Get service URL and run health checks
        STAGING_URL=$(kubectl get service aifx-external-service -n aifx-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Testing staging deployment at: http://$STAGING_URL"
        
        # Health check
        curl -f "http://$STAGING_URL/health" || exit 1
        curl -f "http://$STAGING_URL/ready" || exit 1
        
        # API smoke test
        curl -f "http://$STAGING_URL/api/v1/models/status" || exit 1

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Pre-deployment checks
      run: |
        # Check cluster health
        kubectl cluster-info
        kubectl get nodes
        
        # Check current deployment status
        kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}

    - name: Deploy to production
      run: |
        # Update image in deployment with blue-green strategy
        kubectl set image deployment/aifx-app aifx-app=${{ needs.build-and-push.outputs.image-tag }} -n ${{ env.KUBE_NAMESPACE }}
        kubectl set image deployment/aifx-ai-worker aifx-ai-worker=${{ needs.build-and-push.outputs.image-tag }} -n ${{ env.KUBE_NAMESPACE }}
        
        # Wait for rollout to complete
        kubectl rollout status deployment/aifx-app -n ${{ env.KUBE_NAMESPACE }} --timeout=900s
        kubectl rollout status deployment/aifx-ai-worker -n ${{ env.KUBE_NAMESPACE }} --timeout=900s

    - name: Production health checks
      run: |
        # Wait for all pods to be ready
        kubectl wait --for=condition=ready pod -l app=aifx-app -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
        kubectl wait --for=condition=ready pod -l app=aifx-ai-worker -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
        
        # Get production URL and run comprehensive health checks
        PROD_URL=$(kubectl get service aifx-external-service -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Testing production deployment at: https://$PROD_URL"
        
        # Health checks
        curl -f "https://$PROD_URL/health" || exit 1
        curl -f "https://$PROD_URL/ready" || exit 1
        
        # API health checks
        curl -f "https://$PROD_URL/api/v1/models/status" || exit 1
        curl -f "https://$PROD_URL/api/v1/signal?symbol=EURUSD" || exit 1

    - name: Post-deployment verification
      run: |
        # Check all deployments are healthy
        kubectl get deployments -n ${{ env.KUBE_NAMESPACE }} -o wide
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -o wide
        
        # Check HPA status
        kubectl get hpa -n ${{ env.KUBE_NAMESPACE }}
        
        # Check service endpoints
        kubectl get endpoints -n ${{ env.KUBE_NAMESPACE }}

  # ============================================================================
  # Rollback on Failure
  # ============================================================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Rollback deployment
      run: |
        echo "Rolling back failed deployment..."
        kubectl rollout undo deployment/aifx-app -n ${{ env.KUBE_NAMESPACE }}
        kubectl rollout undo deployment/aifx-ai-worker -n ${{ env.KUBE_NAMESPACE }}
        
        # Wait for rollback to complete
        kubectl rollout status deployment/aifx-app -n ${{ env.KUBE_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/aifx-ai-worker -n ${{ env.KUBE_NAMESPACE }} --timeout=600s

    - name: Verify rollback
      run: |
        kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}

  # ============================================================================
  # Notification
  # ============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ AIFX production deployment successful!"
        echo "Version: ${{ github.sha }}"
        echo "Environment: production"
        echo "Time: $(date)"

    - name: Notify on failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ AIFX production deployment failed!"
        echo "Version: ${{ github.sha }}"
        echo "Check logs and rollback initiated"